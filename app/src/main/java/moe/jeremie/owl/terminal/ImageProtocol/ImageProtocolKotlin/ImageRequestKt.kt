import moe.jeremie.owl.terminal.ImageProtocol.ImageProtocolKotlin.ImageProtocol

//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: ImageProtocol.proto

@kotlin.jvm.JvmName("-initializeimageRequest")
public inline fun imageRequest(block: ImageRequestKt.Dsl.() -> kotlin.Unit): ImageProtocol.ImageRequest =
  ImageRequestKt.Dsl._create(ImageProtocol.ImageRequest.newBuilder()).apply { block() }._build()
public object ImageRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ImageProtocol.ImageRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ImageProtocol.ImageRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ImageProtocol.ImageRequest = _builder.build()

    /**
     * <code>int32 cmd_id = 1;</code>
     */
    public var cmdId: kotlin.Int
      @JvmName("getCmdId")
      get() = _builder.getCmdId()
      @JvmName("setCmdId")
      set(value) {
        _builder.setCmdId(value)
      }
    /**
     * <code>int32 cmd_id = 1;</code>
     */
    public fun clearCmdId() {
      _builder.clearCmdId()
    }

    /**
     * <code>optional int32 package_id = 2;</code>
     */
    public var packageId: kotlin.Int
      @JvmName("getPackageId")
      get() = _builder.getPackageId()
      @JvmName("setPackageId")
      set(value) {
        _builder.setPackageId(value)
      }
    /**
     * <code>optional int32 package_id = 2;</code>
     */
    public fun clearPackageId() {
      _builder.clearPackageId()
    }
    /**
     * <code>optional int32 package_id = 2;</code>
     * @return Whether the packageId field is set.
     */
    public fun hasPackageId(): kotlin.Boolean {
      return _builder.hasPackageId()
    }

    /**
     * <code>optional int32 camera_id = 3;</code>
     */
    public var cameraId: kotlin.Int
      @JvmName("getCameraId")
      get() = _builder.getCameraId()
      @JvmName("setCameraId")
      set(value) {
        _builder.setCameraId(value)
      }
    /**
     * <code>optional int32 camera_id = 3;</code>
     */
    public fun clearCameraId() {
      _builder.clearCameraId()
    }
    /**
     * <code>optional int32 camera_id = 3;</code>
     * @return Whether the cameraId field is set.
     */
    public fun hasCameraId(): kotlin.Boolean {
      return _builder.hasCameraId()
    }

    /**
     * <code>optional int32 image_width = 11;</code>
     */
    public var imageWidth: kotlin.Int
      @JvmName("getImageWidth")
      get() = _builder.getImageWidth()
      @JvmName("setImageWidth")
      set(value) {
        _builder.setImageWidth(value)
      }
    /**
     * <code>optional int32 image_width = 11;</code>
     */
    public fun clearImageWidth() {
      _builder.clearImageWidth()
    }
    /**
     * <code>optional int32 image_width = 11;</code>
     * @return Whether the imageWidth field is set.
     */
    public fun hasImageWidth(): kotlin.Boolean {
      return _builder.hasImageWidth()
    }

    /**
     * <code>optional int32 image_height = 12;</code>
     */
    public var imageHeight: kotlin.Int
      @JvmName("getImageHeight")
      get() = _builder.getImageHeight()
      @JvmName("setImageHeight")
      set(value) {
        _builder.setImageHeight(value)
      }
    /**
     * <code>optional int32 image_height = 12;</code>
     */
    public fun clearImageHeight() {
      _builder.clearImageHeight()
    }
    /**
     * <code>optional int32 image_height = 12;</code>
     * @return Whether the imageHeight field is set.
     */
    public fun hasImageHeight(): kotlin.Boolean {
      return _builder.hasImageHeight()
    }

    /**
     * <code>optional bool need_resize = 101;</code>
     */
    public var needResize: kotlin.Boolean
      @JvmName("getNeedResize")
      get() = _builder.getNeedResize()
      @JvmName("setNeedResize")
      set(value) {
        _builder.setNeedResize(value)
      }
    /**
     * <code>optional bool need_resize = 101;</code>
     */
    public fun clearNeedResize() {
      _builder.clearNeedResize()
    }
    /**
     * <code>optional bool need_resize = 101;</code>
     * @return Whether the needResize field is set.
     */
    public fun hasNeedResize(): kotlin.Boolean {
      return _builder.hasNeedResize()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ImageProtocol.ImageRequest.copy(block: ImageRequestKt.Dsl.() -> kotlin.Unit): ImageProtocol.ImageRequest =
  ImageRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

